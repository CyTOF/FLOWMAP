out_dir <- SPADE.normalize.out_dir(out_dir)
files
files <- file.loc
files
file_pattern <- "*.fcs"
cluster_cols <- NULL
panels <- NULL
comp <- TRUE
downsampling_target_number <- NULL
downsampling_target_pctile <- NULL
downsampling_target_percent <- 0.1
downsampling_exclude_pctile <- 0.01
k <- 200
clustering_samples <- 5000
if (length(files) == 1) {
if (!file.exists(files)) {
stop(paste("File not found:", files))
}
if (file.info(files)$isdir) {
files <- dir(SPADE.strip.sep(files),full.names=TRUE,pattern=glob2rx(file_pattern))
}
}
if (length(files) == 0) {
stop("No input files found")
}
out_dir <- SPADE.normalize.out_dir(out_dir)
files
file.loc <- "/Users/mesako/Downloads/iPSC/data/original/fcs_files_subfold"
rm(list=ls())
# source("http://bioconductor.org/biocLite.R")
# biocLite("spade")
library(spade)
library(igraph)
library(devtools)
# install_github("zunderlab/FLOWMAP",
#                auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
SPADE.strip.sep <- function(name) {
ifelse(substr(name,nchar(name),nchar(name))==.Platform$file,substr(name,1,nchar(name)-1),name)
}
SPADE.normalize.out_dir <- function(out_dir) {
out_dir <- SPADE.strip.sep(out_dir)
out_dir_info <- file.info(out_dir)
if (is.na(out_dir_info$isdir)) {
dir.create(out_dir)
}
if (!file.info(out_dir)$isdir) {
stop(paste("out_dir:",out_dir,"is not a directory"))
}
out_dir <- paste(SPADE.strip.sep(out_dir),.Platform$file,sep="")
}
file.loc <- "/Users/mesako/Downloads/iPSC/data/original/fcs_files_subfold"
# files <- file.loc
files <- list.files(file.loc, full.names = TRUE)
transforms <- flowCore::arcsinhTransform(a = 0, b = 0.2)
out_dir <- "/Users/mesako/Downloads/iPSC/test/new_spade_clusters"
file_pattern <- "*.fcs"
cluster_cols <- NULL
panels <- NULL
comp <- TRUE
downsampling_target_number <- NULL
downsampling_target_pctile <- NULL
downsampling_target_percent <- 0.1
downsampling_exclude_pctile <- 0.01
k <- 200
clustering_samples <- 5000
if (length(files) == 1) {
if (!file.exists(files)) {
stop(paste("File not found:", files))
}
if (file.info(files)$isdir) {
files <- dir(SPADE.strip.sep(files),full.names=TRUE,pattern=glob2rx(file_pattern))
}
}
if (length(files) == 0) {
stop("No input files found")
}
out_dir <- SPADE.normalize.out_dir(out_dir)
out_dir
files
# Validate structure of panels
if (!is.null(panels))  {
if (!is.list(panels))
stop("Invalid panels argument, see function documentation")
lapply(panels, function(x) {
if (!is.list(x) || !all(c("panel_files", "median_cols") %in% names(x)))
stop("Invalid panel found, see function documentation for proper panel structure")
if (!all(x$panel_files %in% basename(files)))
stop("Panel files must be a subset of analysis files")
if (!is.null(x$reference_files) && !all(x$reference_files %in% x$panel_files))
stop("Panel reference files must be a subset of panel files")
})
}
if (!is.null(arcsinh_cofactor)) {
warning("arcsinh_cofactor is deprecated, use transform=flowCore::arcsinhTransform(...) instead")
transforms <- flowCore::arcsinhTransform(a=0, b=1/arcsinh_cofactor)
}
# Strip any existing cluster and density columns from files
for (f in files) {
SPADE.removeExistingDensityAndClusterColumns(f)
}
files
{
message("Downsampling file: ",f)
f_density <- paste(out_dir,basename(f),".density.fcs",sep="")
f_sampled <- paste(out_dir,basename(f),".downsample.fcs",sep="")
SPADE.addDensityToFCS(f, f_density, cols=cluster_cols, comp=comp, transforms=transforms)
SPADE.downsampleFCS(f_density,
f_sampled,
exclude_pctile=downsampling_exclude_pctile,
target_pctile=downsampling_target_pctile,
target_number=downsampling_target_number,
target_percent=downsampling_target_percent)
density_files <- c(density_files, f_density)
sampled_files <- c(sampled_files, f_sampled)
}
# Strip any existing cluster and density columns from files
for (f in files) {
SPADE.removeExistingDensityAndClusterColumns(f)
}
# Run downsampling/clustering/upsampling on all specified files
density_files <- c()
sampled_files <- c()
for (f in files) {
message("Downsampling file: ",f)
f_density <- paste(out_dir,basename(f),".density.fcs",sep="")
f_sampled <- paste(out_dir,basename(f),".downsample.fcs",sep="")
SPADE.addDensityToFCS(f, f_density, cols=cluster_cols, comp=comp, transforms=transforms)
SPADE.downsampleFCS(f_density,
f_sampled,
exclude_pctile=downsampling_exclude_pctile,
target_pctile=downsampling_target_pctile,
target_number=downsampling_target_number,
target_percent=downsampling_target_percent)
density_files <- c(density_files, f_density)
sampled_files <- c(sampled_files, f_sampled)
}
files
rm(list=ls())
# source("http://bioconductor.org/biocLite.R")
# biocLite("spade")
library(spade)
library(igraph)
library(devtools)
# install_github("zunderlab/FLOWMAP",
#                auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
# SPADE.strip.sep <- function(name) {
#   ifelse(substr(name,nchar(name),nchar(name))==.Platform$file,substr(name,1,nchar(name)-1),name)
# }
#
# SPADE.normalize.out_dir <- function(out_dir) {
#   out_dir <- SPADE.strip.sep(out_dir)
#   out_dir_info <- file.info(out_dir)
#   if (is.na(out_dir_info$isdir)) {
#     dir.create(out_dir)
#   }
#   if (!file.info(out_dir)$isdir) {
#     stop(paste("out_dir:",out_dir,"is not a directory"))
#   }
#   out_dir <- paste(SPADE.strip.sep(out_dir),.Platform$file,sep="")
# }
#
#
# file.loc <- "/Users/mesako/Downloads/iPSC/data/original/fcs_files_subfold"
# # files <- file.loc
# files <- list.files(file.loc, full.names = TRUE)
# transforms <- flowCore::arcsinhTransform(a = 0, b = 0.2)
# out_dir <- "/Users/mesako/Downloads/iPSC/test/new_spade_clusters"
#
#
# file_pattern <- "*.fcs"
# cluster_cols <- NULL
# panels <- NULL
# comp <- TRUE
# downsampling_target_number <- NULL
# downsampling_target_pctile <- NULL
# downsampling_target_percent <- 0.1
# downsampling_exclude_pctile <- 0.01
# k <- 200
# clustering_samples <- 5000
#
# if (length(files) == 1) {
#   if (!file.exists(files)) {
#     stop(paste("File not found:", files))
#   }
#   if (file.info(files)$isdir) {
#     files <- dir(SPADE.strip.sep(files),full.names=TRUE,pattern=glob2rx(file_pattern))
#   }
# }
# if (length(files) == 0) {
#   stop("No input files found")
# }
# out_dir <- SPADE.normalize.out_dir(out_dir)
#
# # Validate structure of panels
# if (!is.null(panels))  {
#   if (!is.list(panels))
#     stop("Invalid panels argument, see function documentation")
#   lapply(panels, function(x) {
#     if (!is.list(x) || !all(c("panel_files", "median_cols") %in% names(x)))
#       stop("Invalid panel found, see function documentation for proper panel structure")
#     if (!all(x$panel_files %in% basename(files)))
#       stop("Panel files must be a subset of analysis files")
#     if (!is.null(x$reference_files) && !all(x$reference_files %in% x$panel_files))
#       stop("Panel reference files must be a subset of panel files")
#   })
# }
#
# if (!is.null(arcsinh_cofactor)) {
#   warning("arcsinh_cofactor is deprecated, use transform=flowCore::arcsinhTransform(...) instead")
#   transforms <- flowCore::arcsinhTransform(a=0, b=1/arcsinh_cofactor)
# }
#
# # Strip any existing cluster and density columns from files
# for (f in files) {
#   SPADE.removeExistingDensityAndClusterColumns(f)
# }
#
# # Run downsampling/clustering/upsampling on all specified files
# density_files <- c()
# sampled_files <- c()
# for (f in files) {
#   message("Downsampling file: ",f)
#   f_density <- paste(out_dir,basename(f),".density.fcs",sep="")
#   f_sampled <- paste(out_dir,basename(f),".downsample.fcs",sep="")
#
#   SPADE.addDensityToFCS(f, f_density, cols=cluster_cols, comp=comp, transforms=transforms)
#   SPADE.downsampleFCS(f_density,
#                       f_sampled,
#                       exclude_pctile=downsampling_exclude_pctile,
#                       target_pctile=downsampling_target_pctile,
#                       target_number=downsampling_target_number,
#                       target_percent=downsampling_target_percent)
#
#   density_files <- c(density_files, f_density)
#   sampled_files <- c(sampled_files, f_sampled)
# }
#
# message("Clustering files...")
# cells_file <- paste(out_dir,"clusters.fcs",sep="")
# clust_file <- paste(out_dir,"clusters.table",sep="")
# graph_file <- paste(out_dir,"mst.gml",sep="")
# SPADE.FCSToTree(sampled_files, cells_file, graph_file, clust_file,
#                 cols=cluster_cols,
#                 transforms=transforms,
#                 k=k,
#                 desired_samples=clustering_samples,
#                 comp=comp)
#
# sampled_files <- c()
# for (f in density_files) {
#   message("Upsampling file: ",f)
#   f_sampled <- paste(f,".cluster.fcs",sep="")
#   SPADE.addClusterToFCS(f, f_sampled, cells_file, cols=cluster_cols, transforms=transforms, comp=comp)
#   sampled_files <- c(sampled_files, f_sampled)
# }
file.loc <- "/Users/mesako/Downloads/iPSC/data/original/fcs_files"
# files <- file.loc
files <- list.files(file.loc, full.names = TRUE)
file_pattern <- "*.fcs"
out_dir <- "/Users/mesako/Downloads/iPSC/data/SPADE_Output_2"
cluster_cols <- c("CD140a(Er168)Dd", "CD24(Nd146)Dd",
"CD44(Yb171)Dd", "CD54(Nd142)Dd", "CD73(Nd148)Dd",
"EpCAM(Tm169)Dd", "GFP(Dy162)Dd", "H3K9ac(In115)Dd",
"Ki67(Sm152)Dd", "Klf4(Yb174)Dd", "Lin28(Er167)Dd",
"MEFSK4(Yb172)Dd", "Nanog(Gd156)Dd", "Oct4(Nd150)Dd",
"SSEA1(Ho165)Dd", "Sox2(Gd160)Dd", "Thy1(Nd144)Dd",
"c-Myc(Sm147)Dd")
panels <- NULL
comp <- TRUE
arcsinh_cofactor <- NULL
transforms <- flowCore::arcsinhTransform(a=0, b=0.2)
downsampling_target_number <- NULL
downsampling_target_pctile <- NULL
downsampling_target_percent <- 0.1
downsampling_exclude_pctile <- 0.01
k <- 200
clustering_samples <- 50000
layout <- igraph:::layout.kamada.kawai
pctile_color <- c(0.02,0.98)
fcs_channel_mappings_json <- NULL
rm(list=ls())
# source("http://bioconductor.org/biocLite.R")
# biocLite("spade")
library(spade)
library(igraph)
library(devtools)
# install_github("zunderlab/FLOWMAP",
#                auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
# SPADE.strip.sep <- function(name) {
#   ifelse(substr(name,nchar(name),nchar(name))==.Platform$file,substr(name,1,nchar(name)-1),name)
# }
#
# SPADE.normalize.out_dir <- function(out_dir) {
#   out_dir <- SPADE.strip.sep(out_dir)
#   out_dir_info <- file.info(out_dir)
#   if (is.na(out_dir_info$isdir)) {
#     dir.create(out_dir)
#   }
#   if (!file.info(out_dir)$isdir) {
#     stop(paste("out_dir:",out_dir,"is not a directory"))
#   }
#   out_dir <- paste(SPADE.strip.sep(out_dir),.Platform$file,sep="")
# }
#
#
# file.loc <- "/Users/mesako/Downloads/iPSC/data/original/fcs_files_subfold"
# # files <- file.loc
# files <- list.files(file.loc, full.names = TRUE)
# transforms <- flowCore::arcsinhTransform(a = 0, b = 0.2)
# out_dir <- "/Users/mesako/Downloads/iPSC/test/new_spade_clusters"
#
#
# file_pattern <- "*.fcs"
# cluster_cols <- NULL
# panels <- NULL
# comp <- TRUE
# downsampling_target_number <- NULL
# downsampling_target_pctile <- NULL
# downsampling_target_percent <- 0.1
# downsampling_exclude_pctile <- 0.01
# k <- 200
# clustering_samples <- 5000
#
# if (length(files) == 1) {
#   if (!file.exists(files)) {
#     stop(paste("File not found:", files))
#   }
#   if (file.info(files)$isdir) {
#     files <- dir(SPADE.strip.sep(files),full.names=TRUE,pattern=glob2rx(file_pattern))
#   }
# }
# if (length(files) == 0) {
#   stop("No input files found")
# }
# out_dir <- SPADE.normalize.out_dir(out_dir)
#
# # Validate structure of panels
# if (!is.null(panels))  {
#   if (!is.list(panels))
#     stop("Invalid panels argument, see function documentation")
#   lapply(panels, function(x) {
#     if (!is.list(x) || !all(c("panel_files", "median_cols") %in% names(x)))
#       stop("Invalid panel found, see function documentation for proper panel structure")
#     if (!all(x$panel_files %in% basename(files)))
#       stop("Panel files must be a subset of analysis files")
#     if (!is.null(x$reference_files) && !all(x$reference_files %in% x$panel_files))
#       stop("Panel reference files must be a subset of panel files")
#   })
# }
#
# if (!is.null(arcsinh_cofactor)) {
#   warning("arcsinh_cofactor is deprecated, use transform=flowCore::arcsinhTransform(...) instead")
#   transforms <- flowCore::arcsinhTransform(a=0, b=1/arcsinh_cofactor)
# }
#
# # Strip any existing cluster and density columns from files
# for (f in files) {
#   SPADE.removeExistingDensityAndClusterColumns(f)
# }
#
# # Run downsampling/clustering/upsampling on all specified files
# density_files <- c()
# sampled_files <- c()
# for (f in files) {
#   message("Downsampling file: ",f)
#   f_density <- paste(out_dir,basename(f),".density.fcs",sep="")
#   f_sampled <- paste(out_dir,basename(f),".downsample.fcs",sep="")
#
#   SPADE.addDensityToFCS(f, f_density, cols=cluster_cols, comp=comp, transforms=transforms)
#   SPADE.downsampleFCS(f_density,
#                       f_sampled,
#                       exclude_pctile=downsampling_exclude_pctile,
#                       target_pctile=downsampling_target_pctile,
#                       target_number=downsampling_target_number,
#                       target_percent=downsampling_target_percent)
#
#   density_files <- c(density_files, f_density)
#   sampled_files <- c(sampled_files, f_sampled)
# }
#
# message("Clustering files...")
# cells_file <- paste(out_dir,"clusters.fcs",sep="")
# clust_file <- paste(out_dir,"clusters.table",sep="")
# graph_file <- paste(out_dir,"mst.gml",sep="")
# SPADE.FCSToTree(sampled_files, cells_file, graph_file, clust_file,
#                 cols=cluster_cols,
#                 transforms=transforms,
#                 k=k,
#                 desired_samples=clustering_samples,
#                 comp=comp)
#
# sampled_files <- c()
# for (f in density_files) {
#   message("Upsampling file: ",f)
#   f_sampled <- paste(f,".cluster.fcs",sep="")
#   SPADE.addClusterToFCS(f, f_sampled, cells_file, cols=cluster_cols, transforms=transforms, comp=comp)
#   sampled_files <- c(sampled_files, f_sampled)
# }
file.loc <- "/Users/mesako/Downloads/iPSC/data/original/fcs_files"
# files <- file.loc
files <- list.files(file.loc, full.names = TRUE)
file_pattern <- "*.fcs"
out_dir <- "/Users/mesako/Downloads/iPSC/data/SPADE_Output_2"
cluster_cols <- c("CD140a(Er168)Dd", "CD24(Nd146)Dd",
"CD44(Yb171)Dd", "CD54(Nd142)Dd", "CD73(Nd148)Dd",
"EpCAM(Tm169)Dd", "GFP(Dy162)Dd", "H3K9ac(In115)Dd",
"Ki67(Sm152)Dd", "Klf4(Yb174)Dd", "Lin28(Er167)Dd",
"MEFSK4(Yb172)Dd", "Nanog(Gd156)Dd", "Oct4(Nd150)Dd",
"SSEA1(Ho165)Dd", "Sox2(Gd160)Dd", "Thy1(Nd144)Dd",
"c-Myc(Sm147)Dd")
panels <- NULL
comp <- TRUE
arcsinh_cofactor <- NULL
transforms <- flowCore::arcsinhTransform(a=0, b=0.2)
downsampling_target_number <- NULL
downsampling_target_pctile <- NULL
downsampling_target_percent <- 0.1
downsampling_exclude_pctile <- 0.01
k <- 200
clustering_samples <- 5000
layout <- igraph:::layout.kamada.kawai
pctile_color <- c(0.02, 0.98)
fcs_channel_mappings_json <- NULL
SPADE.driver(files = files, file_pattern = file_pattern,
out_dir = out_dir, cluster_cols = cluster_cols,
panels = panels, comp = comp, arcsinh_cofactor = arcsinh_cofactor,
transforms = transforms, downsampling_target_number = downsampling_target_number,
downsampling_target_pctile = downsampling_target_pctile,
downsampling_target_percent = downsampling_target_percent,
downsampling_exclude_pctile = downsampling_target_pctile,
k = k, clustering_samples = clustering_samples, layout = layout,
pctile_color = pctile_color, fcs_channel_mappings_json = fcs_channel_mappings_json)
devtools::document()
library(devtools)
devtools::document()
library(roxygen2)
library(devtools)
devtools::document()
getwd()
setwd("/Users/mesako/Desktop/Work/Research/Code/FLOW-MAP")
getwd()
devtools::document()
devtools::document()
source("https://bioconductor.org/biocLite.R")
biocLite("cytofkit")
library(cytofkit)
library(tcltk)
tcltk
library(tcltk)
devtools::document()
devtools::document()
devtools::document()
rm(list=ls())
library(devtools)
install_github("zunderlab/FLOWMAP",
auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
FLOWMAPR::launch_GUI()
library(shiny)
sessionInfo()
sessionInfo()[1]
sessionInfo()[2]
sessionInfo()[3]
sessionInfo()[4]
sessionInfo()[5]
sessionInfo()[6]
sessionInfo()[7]
sessionInfo()
library(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny)
sessionInfo()
library(rhandsontable)
install.packages("rhandsontable")
library(rhandsontable)
rm(list=ls())
library(devtools)
install_github("zunderlab/FLOWMAP",
auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
FLOWMAPR::launch_GUI()
FLOWMAPR::launch_GUI()
rm(list=ls())
library(devtools)
install_github("zunderlab/FLOWMAP",
auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
FLOWMAPR::launch_GUI()
FLOWMAPR::launch_GUI()
sessionInfo()
library(FLOWMAPR)
session_info()
sessionInfo()
require(flowCore)
rm(list=ls())
library(devtools)
install_github("zunderlab/FLOWMAP",
auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
FLOWMAPR::launch_GUI()
rm(list=ls())
library(devtools)
install_github("zunderlab/FLOWMAP",
auth_token = "787ed76d9dce8d81323a8100a906c15087dfda66")
library(FLOWMAPR)
FLOWMAPR::launch_GUI()
FLOWMAPR::launch_GUI()
FLOWMAPR::launch_GUI()
